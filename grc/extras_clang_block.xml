<?xml version="1.0"?>
<!--
###################################################
##Clang block:
###################################################
 -->
<block>
    <name>Ex: Clang Block</name>
    <key>extras_clang_block</key>
    <import>import grextras</import>
    <import>import ctypes</import>
    <make>grextras.ClangBlockParams()
self.$(id).name = $name
self.$(id).source = open($source).read()
for flag in $flags:
    self.$(id).flags.append(flag)
for include in $includes:
    self.$(id).includes.append(include)
for library in $libraries:
    ctypes.CDLL(library, ctypes.RTLD_GLOBAL)
self.$(id) = grextras.ClangBlock(self.$(id))
#if $num_props() >= 1
self.$(id).set($key1, $value1)
#end if
#if $num_props() >= 2
self.$(id).set($key2, $value2)
#end if
#if $num_props() >= 3
self.$(id).set($key3, $value3)
#end if
try: self.adopt_child("$(id)", $(id))
except Exception as ex: print ex</make>
    <callback>set($key1, $value1)</callback>
    <callback>set($key2, $value2)</callback>
    <callback>set($key3, $value3)</callback>
    <param>
        <name>Num inputs</name>
        <key>num_inputs</key>
        <value>2</value>
        <type>int</type>
        <hide>part</hide>
    </param>
    <param>
        <name>Num outputs</name>
        <key>num_outputs</key>
        <value>1</value>
        <type>int</type>
        <hide>part</hide>
    </param>
    <param>
        <name>Block source</name>
        <key>source</key>
        <value></value>
        <type>file_open</type>
    </param>
    <param>
        <name>Factory name</name>
        <key>name</key>
        <value>make_my_block</value>
        <type>string</type>
    </param>
    <param>
        <name>Flags</name>
        <key>flags</key>
        <value>["-O3"]</value>
        <type>raw</type>
    </param>
    <param>
        <name>Includes</name>
        <key>includes</key>
        <value>["/usr/local/include", "/usr/include"]</value>
        <type>raw</type>
    </param>
    <param>
        <name>Libraries</name>
        <key>libraries</key>
        <value>["libgras.so", "libpmc.so"]</value>
        <type>raw</type>
    </param>
    <param>
        <name>Num properties</name>
        <key>num_props</key>
        <value>0</value>
        <type>int</type>
        <hide>part</hide>
        <option><name>0</name><key>0</key></option>
        <option><name>1</name><key>1</key></option>
        <option><name>2</name><key>2</key></option>
        <option><name>3</name><key>3</key></option>
    </param>
    <param>
        <name>Prop key1</name>
        <key>key1</key>
        <value>foo</value>
        <type>string</type>
        <hide>#if $num_props() >= 1 then 'none' else 'all'#</hide>
    </param>
    <param>
        <name>Prop value1</name>
        <key>value1</key>
        <value>None</value>
        <type>raw</type>
        <hide>#if $num_props() >= 1 then 'none' else 'all'#</hide>
    </param>
    <param>
        <name>Prop key2</name>
        <key>key2</key>
        <value>bar</value>
        <type>string</type>
        <hide>#if $num_props() >= 2 then 'none' else 'all'#</hide>
    </param>
    <param>
        <name>Prop value2</name>
        <key>value2</key>
        <value>None</value>
        <type>raw</type>
        <hide>#if $num_props() >= 2 then 'none' else 'all'#</hide>
    </param>
    <param>
        <name>Prop key3</name>
        <key>key3</key>
        <value>baz</value>
        <type>string</type>
        <hide>#if $num_props() >= 3 then 'none' else 'all'#</hide>
    </param>
    <param>
        <name>Prop value3</name>
        <key>value3</key>
        <value>None</value>
        <type>raw</type>
        <hide>#if $num_props() >= 3 then 'none' else 'all'#</hide>
    </param>
    <sink>
        <name>in</name>
        <type></type>
        <nports>$num_inputs</nports>
    </sink>
    <source>
        <name>out</name>
        <type></type>
        <nports>$num_outputs</nports>
    </source>
    <doc>
The Clang block GRC wrapper gives a simple interface for using the Clang block with GRC. \
Simply provide source file, factory function name, include directories, libraries, and other compiler arguments.

The number of input and output ports provides GRC with information about the port availability. \
To keep this wrapper flexible, the ports are all type agnostic at connection and generation time.

The optional properties allow GRC's variable callback system to interact with registered block properties. \
The key should match the key of a registered property, and the value should be of the expected data type. \
See the GRAS coding guide for more information about the property interface.
    </doc>
</block>
